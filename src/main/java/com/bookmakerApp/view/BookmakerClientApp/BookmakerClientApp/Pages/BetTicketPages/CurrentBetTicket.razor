@page "/currentBetTicket"
@using Newtonsoft.Json.Linq
@using BookmakerClientApp.Data.Extension
@using BookmakerClientApp.Data.Model.BetTicket
@using BookmakerClientApp.Data.Model.Event
@using BookmakerClientApp.Data.Model.Event.Football
@using BookmakerClientApp.Data.Model.Event.MMA
@using BookmakerClientApp.Data.Model.User
@using BookmakerClientApp.Data.Service
@inject BetTicketService betTicketService
@inject EventService eventService
@inject AuthService authService
@inject IJSRuntime JS

<br/>
@if (footballEvents.Count != 0 || mmaEvents.Count != 0)
{
    <body class="large-screen">
    <div class="wrap">
        <div class="table-wrapper">
            <table class="table-responsive card-list-table">
                <thead>
                <tr>
                    <th>Zdarzenie</th>
                    <th>Dyscyplina</th>
                    <th>Data</th>
                    <th>Kurs</th>
                    <th>Wybrany wynik</th>
                    <th>Usuń</th>
                </tr>
                </thead>
                <tbody>
                @foreach (FootballEventModel eventModel in footballEvents)
                {
                    <tr>
                        <td data-title="Zdarzenie">@eventModel.HomeTeamName-@eventModel.VisitingTeamName</td>
                        <td data-title="Dyscyplina">Piłka nożna</td>
                        <td data-title="Data">@eventModel.Date</td>
                        <td data-title="Kurs">@eventModel.Odds</td>
                        <td data-title="Wybrany wynik">@ChangeFormat(@eventModel.ChosenResult)</td>
                        <td data-title="Usuń">
                            <button class="btn btn-primary" @onclick="() => RemoveEvent(eventModel.IdEvent)">Usuń</button>
                        </td>
                    </tr>
                }
                @foreach (MMAEventModel eventModel in mmaEvents)
                {
                    <tr>
                        <td data-title="Zdarzenie">@eventModel.FirstFighterName-@eventModel.SecondFighterName</td>
                        <td data-title="Dyscyplina">MMA</td>
                        <td data-title="Data">@eventModel.Date</td>
                        <td data-title="Kurs">@eventModel.Odds</td>
                        <td data-title="Wybrany wynik">@ChangeFormatForMMA(@eventModel.ChosenResult, @eventModel.FirstFighterName, @eventModel.SecondFighterName)</td>
                        <td data-title="Usuń">
                            <button class="btn btn-primary" @onclick="() => RemoveEvent(eventModel.IdEvent)">Usuń</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <form>
        <div class="form-row align-items-center">
            <div class="col-auto" style="padding-left: 160px;width:25%;">
                <label class="sr-only" for="inlineFormInput">Wkład</label>
                <input type="text" class="form-control mb-2" id="inlineFormInput" placeholder="Wkład" value="@deposit" @oninput="@CountToWin" style="background-color:white">
            </div>
            <div class="col-auto" style="width: 25%;">
                <label class="sr-only" for="inlineFormInput">Kurs</label>
                <input type="text" class="form-control mb-2" id="inlineFormInput" placeholder="Kurs: @odds.ToString("0.00")" style="background-color:white" readonly>
            </div>
            <div class="col-auto" style="width:25%">
                <label class="sr-only" for="inlineFormInput">Do wygrania</label>
                <input type="text" class="form-control mb-2" id="inlineFormInput" placeholder="Do wygrania: @toWin" style="background-color:white" readonly>
            </div>
            <div class="col-auto" style="width:25%">
                <button type="submit" class="btn btn-primary mb-2" style="width:25%" @onclick="@AddBetTicket">Zagraj</button>
            </div>
        </div>
    </form>
    </body>
}
else
{
    <style>
        .center {
            text-align: center;
        }
    </style>
    <br/>
    <div class="center">
        <h1>Kupon jest pusty</h1>
    </div>
}


@code{
    private JArray eventsIdList = new();
    private List<FootballEventModel> footballEvents = new();
    private List<MMAEventModel> mmaEvents = new();
    private double deposit;
    private BetTicketDto betTicketDto = new();
    private double odds = 1.0;
    private string toWin = "0";
    private UserModel user = new();

    protected override async Task OnInitializedAsync()
    {
        GetListFromLocalStorage();
        await GetFootballEvents();
        await GetMMAEvents();
        CountOdds();
        List<EventModel> connectEventsList = new();
        connectEventsList.AddRange(footballEvents);
        connectEventsList.AddRange(mmaEvents);
        betTicketDto.Events = connectEventsList;
    }

    private void GetListFromLocalStorage()
    {
        string key = "events-list";
        LocalStorageExtension localStorage = LocalStorageExtension.GetInstance();
        eventsIdList = localStorage.Get<JArray>(key);
    }

    private async Task GetFootballEvents()
    {
        footballEvents = await eventService.GetFootballEventsByIds(eventsIdList);
    }

    private async Task GetMMAEvents()
    {
        mmaEvents = await eventService.GetMMAEventsByIds(eventsIdList);
    }

    private async Task AddBetTicket()
    {
        user.IdUser = long.Parse(authService.GetUserId());
        betTicketDto.User = user;
        betTicketDto.Deposit = deposit;
        HttpResponseMessage response = await betTicketService.AddBetTicket(betTicketDto);
        string statusCode = response.StatusCode.ToString();

        if (statusCode.Equals("OK"))
        {
            string key = "events-list";
            footballEvents = new();
            mmaEvents = new();
            LocalStorageExtension localStorage = LocalStorageExtension.GetInstance();
            localStorage.Store(key, footballEvents);
        }
        else
        {
            bool confirmed = await JS.InvokeAsync<bool>("alert", "Zbyt mały stan konta");
            string result = confirmed ? "You clicked OK" : "You clicked Cancel";
            Console.WriteLine(result);
        }
    }

    private void CountOdds()
    {
        foreach (FootballEventModel footballEvent in footballEvents)
        {
            odds *= footballEvent.Odds;
        }
        foreach (MMAEventModel mmaEvent in mmaEvents)
        {
            odds *= mmaEvent.Odds;
        }
    }

    private void CountToWin(ChangeEventArgs args)
    {
        var newValue = args.Value?.ToString() ?? string.Empty;
        if (newValue != string.Empty && double.TryParse(newValue, out deposit))
        {
            var toWinDouble = odds * deposit;
            toWin = toWinDouble.ToString("0.00");
        }
        else
        {
            toWin = "0.00";
        }
    }

    private async Task RemoveEvent(long id)
    {
        string key = "events-list";
        LocalStorageExtension localStorage = LocalStorageExtension.GetInstance();
        JArray newArray = localStorage.Get<JArray>(key);
        List<long> newEventsList = newArray.ToObject<List<long>>();
        if (newEventsList.Contains(id))
        {
            newEventsList.Remove(id);
            newArray = new JArray { newEventsList };
            odds = 1.0;
        }
        localStorage.Store(key, newArray);
        await OnInitializedAsync();
    }

    private String ChangeFormat(String result)
    {
        if (result.Equals("FIRST_TEAM_WIN"))
        {
            result = "Drużyna gospodarzy wygra";
        }
        else if (result.Equals("SECOND_TEAM_WIN"))
        {
            result = "Drużyna gości wygra";
        }
        else
        {
            result = "Remis";
        }
        return result;
    }

    private String ChangeFormatForMMA(String result, string firstFighterName, string secondFighterName)
    {
        if (result.Equals("FIRST_FIGHTER_WIN"))
        {
            result = "Wygra " + firstFighterName;
        }
        else if (result.Equals("SECOND_FIGHTER_WIN"))
        {
            result = "Wygra " + secondFighterName;
        }
        else
        {
            result = "";
        }
        return result;
    }

}